<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.sonar.db.user.UserMapper">

  <sql id="userColumns">
    u.id as id,
    u.login as login,
    u.name as name,
    u.email as email,
    u.active as "active",
    u.scm_accounts as "scmAccounts",
    u.salt as "salt",
    u.crypted_password as "cryptedPassword",
    u.external_identity as "externalIdentity",
    u.external_identity_provider as "externalIdentityProvider",
    u.user_local as "local",
    u.is_root as "root",
    u.onboarded as "onboarded",
    u.created_at as "createdAt",
    u.updated_at as "updatedAt"
  </sql>

  <select id="selectByLogin" parameterType="String" resultType="User">
    SELECT
    <include refid="userColumns"/>
    FROM users u
    WHERE u.login=#{login}
  </select>

  <select id="selectNullableByScmAccountOrLoginOrEmail" parameterType="map" resultType="User">
    SELECT
    <include refid="userColumns"/>
    FROM users u
    WHERE
    u.login=#{scmAccount}
    OR u.email=#{scmAccount}
    OR u.scm_accounts like #{likeScmAccount}
  </select>

  <select id="selectUser" parameterType="int" resultType="User">
    SELECT
    <include refid="userColumns"/>
    FROM users u
    WHERE u.id=#{id}
  </select>

  <select id="selectUserByLogin" parameterType="string" resultType="User">
    SELECT
    <include refid="userColumns"/>
    FROM users u
    WHERE u.login=#{id} AND u.active=${_true}
  </select>

  <select id="selectByLogins" parameterType="string" resultType="User">
    SELECT
    <include refid="userColumns"/>
    FROM users u
    WHERE u.login in
    <foreach collection="list" open="(" close=")" item="login" separator=",">
      #{login}
    </foreach>
  </select>

  <select id="scrollAll" resultType="User" fetchSize="${_scrollFetchSize}" resultSetType="FORWARD_ONLY">
    select <include refid="userColumns"/>
    from users u
  </select>

  <select id="selectByIds" parameterType="string" resultType="User">
    SELECT
    <include refid="userColumns"/>
    FROM users u
    WHERE u.id in
    <foreach collection="ids" open="(" close=")" item="id" separator=",">
      #{id}
    </foreach>
  </select>

  <select id="selectUsers" parameterType="map" resultType="User">
    SELECT
    <include refid="userColumns"/>
    FROM users u
    <where>
      <if test="logins != null and logins.size() > 0">
        u.login IN
        <foreach item="login" index="index" collection="logins" open="(" separator="," close=")">
          #{login}
        </foreach>
      </if>
      <if test="includeDeactivated==false">
        AND u.active=${_true}
      </if>
      <if test="searchText != null">
        AND (u.login LIKE #{searchTextSql} ESCAPE '/' OR u.name LIKE #{searchTextSql} ESCAPE '/')
      </if>
      <if test="mustBeRoot != null and mustBeRoot==true">
        AND u.is_root = ${_true}
      </if>
      <if test="mustBeRoot != null and mustBeRoot==false">
        AND u.is_root = ${_false}
      </if>
    </where>
    ORDER BY u.name
  </select>

  <select id="countByEmail" parameterType="String" resultType="long">
    SELECT count(1)
    FROM users u
    where lower(u.email)=#{email} AND u.active=${_true}
  </select>

  <select id="countRootUsersButLogin" parameterType="String" resultType="long">
    select
      count(1)
    from
      users u
    where
      u.active = ${_true}
      and u.is_root = ${_true}
      and u.login &lt;&gt; #{login}
  </select>

  <update id="deactivateUser" parameterType="map">
    update users set
      active = ${_false},
      email = null,
      scm_accounts = null,
      external_identity = null,
      external_identity_provider = null,
      salt = null,
      crypted_password = null,
      updated_at = #{now, jdbcType=BIGINT}
    where
      login = #{login, jdbcType=VARCHAR}
  </update>

  <update id="setRoot">
    update users set
      is_root = #{root, jdbcType=BOOLEAN},
      updated_at = #{now, jdbcType=BIGINT}
    where
      login = #{login, jdbcType=VARCHAR}
      and active = ${_true}
  </update>

  <insert id="insert" parameterType="map" keyColumn="id" useGeneratedKeys="true" keyProperty="user.id">
    insert into users (
      login,
      name,
      email,
      active,
      scm_accounts,
      external_identity,
      external_identity_provider,
      user_local,
      salt,
      crypted_password,
      is_root,
      onboarded,
      created_at,
      updated_at
    ) values (
      #{user.login,jdbcType=VARCHAR},
      #{user.name,jdbcType=VARCHAR},
      #{user.email,jdbcType=VARCHAR},
      #{user.active,jdbcType=BOOLEAN},
      #{user.scmAccounts,jdbcType=VARCHAR},
      #{user.externalIdentity,jdbcType=VARCHAR},
      #{user.externalIdentityProvider,jdbcType=VARCHAR},
      #{user.local,jdbcType=BOOLEAN},
      #{user.salt,jdbcType=VARCHAR},
      #{user.cryptedPassword,jdbcType=VARCHAR},
      #{user.root,jdbcType=BOOLEAN},
      #{user.onboarded,jdbcType=BOOLEAN},
      #{now,jdbcType=BIGINT},
      #{now,jdbcType=BIGINT}
    )
  </insert>

  <update id="update" parameterType="map">
    update users set
      name = #{user.name, jdbcType=VARCHAR},
      email = #{user.email, jdbcType=VARCHAR},
      active = #{user.active, jdbcType=BOOLEAN},
      scm_accounts = #{user.scmAccounts, jdbcType=VARCHAR},
      external_identity = #{user.externalIdentity, jdbcType=VARCHAR},
      external_identity_provider = #{user.externalIdentityProvider, jdbcType=VARCHAR},
      user_local = #{user.local, jdbcType=BOOLEAN},
      onboarded = #{user.onboarded, jdbcType=BOOLEAN},
      salt = #{user.salt, jdbcType=VARCHAR},
      crypted_password = #{user.cryptedPassword, jdbcType=BIGINT},
      updated_at = #{now, jdbcType=BIGINT}
    where
      login = #{user.login, jdbcType=VARCHAR}
  </update>

</mapper>
